// üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const orderForm = document.getElementById('orderForm');
const ordersContainer = document.getElementById('ordersContainer');
const errorMessage = document.getElementById('errorMessage');
const successMessage = document.getElementById('successMessage');

// üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
let orders = [];

// üîÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(element, text) {
    element.textContent = text;
    element.style.display = 'block';
    setTimeout(() => {
        element.style.display = 'none';
    }, 4000);
}

function showError(text) {
    showMessage(errorMessage, '‚ùå ' + text);
}

function showSuccess(text) {
    showMessage(successMessage, '‚úÖ ' + text);
}

// üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã
async function loadOrders() {
    try {
        const response = await apiRequest('/api/orders', { method: 'GET' });
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        throw error;
    }
}

// üì§ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
async function createOrder(orderData) {
    try {
        const response = await apiRequest('/api/orders', {
            method: 'POST',
            body: JSON.stringify(orderData)
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        throw error;
    }
}

// üé® –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã
function renderOrders(ordersArray) {
    if (!ordersArray || ordersArray.length === 0) {
        ordersContainer.innerHTML = '<div class="loading">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }

    ordersContainer.innerHTML = ordersArray.map(order => `
        <div class="order-card">
            <h3>–ó–∞–∫–∞–∑ #${order.id}</h3>
            <p><strong>üçΩÔ∏è –ß—Ç–æ:</strong> ${order.items}</p>
            <p><strong>üìç –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å:</strong> ${order.address}</p>
        </div>
    `).join('');
}

// üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
async function refreshOrders() {
    try {
        orders = await loadOrders();
        renderOrders(orders);
    } catch (error) {
        ordersContainer.innerHTML = '<div class="loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</div>';
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
orderForm.addEventListener('submit', async function(event) {
    event.preventDefault(); 

    const formData = new FormData(this);
    const orderData = {
        items: formData.get('items').trim(),
        address: formData.get('address').trim()
    };

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const button = this.querySelector('button');
    const originalText = button.textContent;
    button.textContent = '–°–æ–∑–¥–∞—ë–º...';
    button.disabled = true;

    try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const newOrder = await createOrder(orderData);
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        this.reset();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await refreshOrders();
        showSuccess('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        button.textContent = originalText;
        button.disabled = false;
    }
});

document.addEventListener('DOMContentLoaded', function() {
    refreshOrders();
});